stages:
  - static_tests
  - build
  - deployment

ci_linter:
  image: golang:1.15.2-alpine3.12
  stage: static_tests
  script:
    - apk add --no-cache git
    - go get gitlab.com/orobardet/gitlab-ci-linter
    - for JOB_PATH in jobs/*; do
    -   JOB=$(basename ${JOB_PATH})
    -   gitlab-ci-linter ${JOB_PATH}/${JOB}.yml
    - done

documentation:
  image:
    name: squidfunk/mkdocs-material:5.2.2
    entrypoint: [""]
  stage: build
  script:
    - pip3 install -r requirements.txt
    - python3 builder/builder.py
    - mkdocs build -d ./public
  artifacts:
    when: always
    expose_as: "Documentation"
    paths:
    - public/

pages:
  stage: deployment
  script:
    - echo 'Deploying on Gitlab pages'
  needs:
    - job: documentation
      artifacts: true
  artifacts:
    paths:
    - public
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# See https://docs.gitlab.com/ee/api/releases/
# We can only control the link to the hub, the release is still storing the source code
release:
  image: curlimages/curl:7.72.0
  stage: deployment
  script: >
    for JOB in jobs/*; do
      JOB=$(basename ${JOB})
      for VERSION in jobs/${JOB}/versions/*; do
        VERSION=$(basename ${VERSION} .md)
        curl --header 'Content-Type: application/json' --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
          --data "{ \
              \"name\": \"${JOB}-${VERSION}\", \
              \"tag_name\": \"${JOB}-${VERSION}\", \
              \"description\": \"$(cat jobs/${JOB}/versions/${VERSION}.md)\", \
              \"assets\": { \
                \"links\": [ \
                  { \"name\": \"Hub link\", \
                    \"url\": \"https://jobs.go2scale.io/${VERSION}/${JOB}.yml\" \
                  } \
                ] \
              } \
            }" \
          --request POST https://gitlab.com/api/v4/projects/go2scale%2Fhub/releases
      done
    done
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'