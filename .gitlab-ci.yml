stages:
  - static_tests
  - build
  - deployment

include:
  - remote: 'https://jobs.go2scale.io/mkdocs.yml'
  - remote: 'https://jobs.go2scale.io/pages.yml'

mkdocs:
  before_script:
    - pip3 install -r requirements.txt
    - python3 builder/builder.py

pages:
  rules:
    - if: '$CI_COMMIT_BRANCH == "latest"'

ci_linter:
  image: golang:1.15.2-alpine3.12
  stage: static_tests
  script:
    - apk add --no-cache git
    - go get gitlab.com/orobardet/gitlab-ci-linter
    - for JOB_PATH in jobs/*; do
    -   JOB=$(basename ${JOB_PATH})
    -   gitlab-ci-linter ${JOB_PATH}/${JOB}.yml
    - done

# See https://docs.gitlab.com/ee/api/releases/
# We can only control the link to the hub, the release is still storing the source code
release:
  image:
    name: alpine/httpie:2.2.0
    entrypoint: [""]
  stage: deployment
  script: >
    for JOB in jobs/*; do
      JOB=$(basename ${JOB})
      for VERSION in jobs/${JOB}/versions/*; do
        VERSION=$(basename ${VERSION} .md)
        http --ignore-stdin POST https://gitlab.com/api/v4/projects/go2scale%2Fhub/releases \
          "JOB-TOKEN: ${CI_JOB_TOKEN}" \
          tag_name=${JOB}-${VERSION} \
          ref=${CI_COMMIT_SHA} \
          "description=$(cat jobs/${JOB}/versions/${VERSION}.md)" \
          'assets:={"links": [{"name": "Hub link", "url": "https://jobs.go2scale.io/'"${VERSION}/${JOB}"'.yml"}]}'
      done
    done
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
