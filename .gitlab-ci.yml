stages:
  - static_tests
  - build
  - deployment

include:
  - remote: 'https://jobs.r2devops.io/1.2.0/mkdocs.yml?scope=0.yml'
  - remote: 'https://jobs.r2devops.io/0.2.0/pages.yml?scope=0.yml'

mkdocs:
  variables:
    PIPENV_PIPFILE: tools/builder/Pipfile
  before_script:
    - pip install pipenv && pipenv install
    - pipenv run python tools/builder/builder.py
    - pip3 install mkdocs-awesome-pages-plugin==2.4.0 # temporary, it will be removed after #202

pages:
  rules:
    - if: '$CI_COMMIT_BRANCH == "latest"'

ci_linter:
  image: golang:1.15.2-alpine3.12
  stage: static_tests
  script:
    - apk add --no-cache git
    - go get gitlab.com/orobardet/gitlab-ci-linter
    - for JOB_PATH in jobs/*; do
    -   JOB=$(basename ${JOB_PATH})
    -   gitlab-ci-linter ${JOB_PATH}/${JOB}.yml
    - done

# See https://docs.gitlab.com/ee/api/releases/
# We can only control the link to the hub, the release is still storing the source code
release:
  image:
    name: alpine/httpie:2.2.0
    entrypoint: [""]
  stage: deployment
  variables:
    PIPENV_PIPFILE: tools/notify/Pipfile
  before_script:
    - apk update && apk add --no-cache bash
    - pip install pipenv && pipenv install

  script: >
    PROJECT_ENCODED=$(/bin/bash -c "$(http --ignore-stdin --body https://gist.githubusercontent.com/cdown/1163649/raw/8a35c36fdd24b373788a7057ed483a5bcd8cd43e/gistfile1.sh) && _encode '$CI_PROJECT_PATH'");

    for JOB in jobs/*; do
      JOB=$(basename ${JOB})
      for VERSION in jobs/${JOB}/versions/*; do
        VERSION=$(basename ${VERSION} .md)
        result=$(http --ignore-stdin POST https://gitlab.com/api/v4/projects/$PROJECT_ENCODED/releases \
          "JOB-TOKEN: ${CI_JOB_TOKEN}" \
          tag_name=${JOB}-${VERSION} \
          ref=${CI_COMMIT_SHA} \
          "description=$(cat jobs/${JOB}/versions/${VERSION}.md)" \
          'assets:={"links": [{"name": "Hub link", "url": "https://jobs.r2devops.io/'"${VERSION}/${JOB}"'.yml"}]}')

          if [ $(echo $result | grep "Release already exists\|${JOB}-${VERSION}" | wc -l) -eq 0 ]; then
            echo "[ERROR] Problem when attempting to create release ${JOB}-${VERSION}"
            echo "[ERROR] ${result}"
            exit 1;
          else
            if [ $(echo ${result} | grep "Release already exists" | wc -l) -eq 0 ]; then
              echo "New version detected for $JOB, sending notification to discord"
              pipenv run python tools/notify/discord_release_notify.py -n ${JOB} -v ${VERSION}
            fi

            echo "Processed ${JOB}-${VERSION} : ${result}";
          fi

      done
    done
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
