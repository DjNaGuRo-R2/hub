# Job from R2Devops hub --> r2devops.io

stages:
  - tests

links_checker:
  image: 
    name: lycheeverse/lychee:0.9
    entrypoint: [""]
  stage: tests
  variables:
    # Variables relative to LYCHEE tool
    ## Defines in which directory LYCHEE is looking for files
    LYCHEE_DIRECTORY: "."
    ## Defines which files it should check, works with a pattern
    LYCHEE_FILES: ""
    ## Exclude links based on regex pattern
    LYCHEE_EXCLUDE_LINKS: ""
    ## Exclude a list of files or directory to exclude from the lychee directory
    LYCHEE_EXCLUDE: ""
    ## Add in the report corrects links
    ## TODO Add ok and skipped links in tests report
    LYCHEE_PRINT_OK: "false"
    ## Custom options
    LYCHEE_OPTIONS: ""
    ## Fails the pipeline if LYCHEE finds a broken link
    FAIL_ON_BROKEN: "true"

    ## Base URL or website root directory to check relative URLs
    ROOT_DIRECTORY: ""

    ## Defines the name of the report, if empty, doesn't generate a report 
    REPORT_OUTPUT: "junit-report.xml"
  script:
    - | 
        if [ ! -z ${REPORT_OUTPUT} ]; then
          apt update && apt upgrade -y && apt install -y curl nodejs npm && npm install junit-report-builder  
        fi

    - add_option() { export LYCHEE_OPTIONS2="${LYCHEE_OPTIONS2} ${1}"; }
    - export ERROR_FILE=${CI_PROJECT_DIR}/errors
    # Output errors to another file, remove the white line and add EOF parse the file
    - |
        generate_report() {
          file=$(sed -e '/^$/d' ${ERROR_FILE} | tail -n +2 | head -n -1)
          echo -e "${file}\nEOF" > ${ERROR_FILE}
          curl -s -o main.cjs https://gitlab.com/r2devops/hub/-/snippets/2318077/raw/main/main.cjs
          node main.cjs "${CI_PROJECT_DIR}" "${ERROR_FILE}" "${REPORT_OUTPUT}"
          mv ${REPORT_OUTPUT} ${CI_PROJECT_DIR}/${REPORT_OUTPUT}
        }

    - | 
        if [ ! -d ${LYCHEE_DIRECTORY} ]; then
          echo "Directory specified ${LYCHEE_DIRECTORY} does not exist, exit"
          exit 1
        else
          cd ${LYCHEE_DIRECTORY}
        fi

    # exclude files from files to scan, works with directory and file pattern
    - |
        if [ ! -z "${LYCHEE_EXCLUDE}" ]; then 
          FILES=""
          if [ ! -z "${LYCHEE_FILES}" ]; then
            FILES=$(find ${LYCHEE_FILES})
          else
            FILES=$(find . -type f)
          fi
          for file_exclude in ${LYCHEE_EXCLUDE}; do
            FILES=$(echo "${FILES}" | grep -v "${file_exclude}")
          done
          add_option "${FILES}"

          else
            if [ ! -z "${LYCHEE_FILES}" ]; then
              add_option "${LYCHEE_FILES}"
            else
                add_option "."
            fi
        fi


    - $([ "${LYCHEE_PRINT_OK}" == "true" ]) && add_option "-v"
    - $([ ! -z "${LYCHEE_EXCLUDE_LINKS}" ]) && add_option "--exclude ${LYCHEE_EXCLUDE_LINKS}"
    - $([ ! -z "${ROOT_DIRECTORY}" ]) && add_option "-b ${ROOT_DIRECTORY}"
    - add_option "${LYCHEE_OPTIONS}"
    - echo "${LYCHEE_OPTIONS2}"

    - | 
        ARE_LINKS_VALID="false"
        if lychee ${LYCHEE_OPTIONS2} 2> ${CI_PROJECT_DIR}/logs 1> ${ERROR_FILE}; then
          echo "No errors so far in the checked files";
          ARE_LINKS_VALID="true"
        fi
        if [ "${LYCHEE_PRINT_OK}" == "true" ]; then
          cat ${CI_PROJECT_DIR}/logs
        fi
        cat ${ERROR_FILE}
        if [ ! -z ${REPORT_OUTPUT} ]; then 
          generate_report
        fi
        if [ ${ARE_LINKS_VALID} == "false" ]; then
          echo "Errors found in the checked files";
          if [ ${FAIL_ON_BROKEN} == "true" ]; then
            exit 1;
          fi
        fi
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/${REPORT_OUTPUT}
    reports:
      junit: ${CI_PROJECT_DIR}/${REPORT_OUTPUT}